<launch>

<!-- roslaunch arguments -->
<arg name="use_teb_planner" default="false"/>
<arg name="show_rviz" default="true"/>
<arg name="paused" default="false"/>
<arg name="debug" default="false"/>  
<arg name="gazebo_gui" default="false"/>
<arg name="use_gmapping" default="true"/>
<arg name="scan_topic" value="scan_filtered"/>
<arg name="map_file" value="$(find unicorn_slam)/maps/gmap_map.yaml"/>
<arg name="lidar_ip" default="192.168.0.100" />

<!-- Joint pos gui -->
<param name="use_gui" value="false"/> 

<!-- Lidar angle limitations (rad) -->
<rosparam param="scan_lower_angle">-1.48</rosparam>
<rosparam param="scan_upper_angle">1.48</rosparam>

<group if="$(arg use_gmapping)">

	<!-- Launch grid-mapping -->
	<node pkg="gmapping" type="slam_gmapping" name="slam_gmapping">
	   	<rosparam file="$(find unicorn_slam)/config/gmapping.yaml"/>
	   	<remap from="scan" to="$(arg scan_topic)"/>
	</node>
</group>

<group unless="$(arg use_gmapping)">

	<!-- Run the map server -->
	<node pkg="map_server" type="map_server" args="$(arg map_file)" respawn="true" name="map" />

	<!--- Run AMCL -->
	<node pkg="amcl" type="amcl" name="amcl" output="screen">
	  <rosparam command="load" file="$(find unicorn_slam)/config/amcl.yaml"/>
	  <remap from="scan" to="$(arg scan_topic)"/>
	</node>
</group>

<!-- Run zed camera -->
<group ns="zed">
    <include file="$(find zed_wrapper)/launch/zed_camera.launch">
        <!-- compliant mode for rviz -->
        <arg name="odometry_frame" value="odom" />
    </include>
</group>

<!-- load joint controller configurations from YAML file to parameter server -->
<rosparam file="$(find am_control)/config/joint_position_control.yaml" command="load" />

<!-- Urdf xml robot description loaded on the Parameter Server-->
<param name="robot_description" command="$(find xacro)/xacro.py '$(find unicorn_description)/urdf/unicorn_target_2_back.urdf.xacro'" />

<!-- Start the am_driver -->
<node name="am_driver_safe" pkg="am_driver_safe" type="am_driver_safe_node" output="screen">
	<param name="serialPort" value="/dev/ttyACM0" type="str" />
	<param name="printCharge" value="false"/>
	<param name="publishTf" value="1"/>
	<param name="pitchAndRoll" value="true"/>
	<param name="publishGPS" value="true"/>
	<param name="serialLog" value="false"/>
	<param name="hil" value="0"/>
	<param name="jsonFile" value="$(find am_driver_safe)/config/automower_hrp.json" type="string" />
</node> 

<!-- Start the Sick LMS111 driver -->
<node pkg="lms1xx" name="lms1xx" type="LMS1xx_node">
	<param name="host" value="$(arg lidar_ip)" />
	<param name="frame_id" value="base_laser"/>
</node>

<!-- Launch Move Base -->
<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
  <group if="$(arg use_teb_planner)">
    <rosparam file="$(find unicorn_description)/config/base_local_planner_teb.yaml" command="load" />
    <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
    <param name="controller_frequency" value="10.0" /> 
  </group>
  <group unless="$(arg use_teb_planner)">
    <rosparam file="$(find unicorn)/config/base_local_planner_params.yaml" command="load" />
  </group>
  <rosparam file="$(find unicorn)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
  <rosparam file="$(find unicorn)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
  <rosparam file="$(find unicorn)/config/local_costmap_params.yaml" command="load" />
  <rosparam file="$(find unicorn)/config/global_costmap_params.yaml" command="load" />
  <remap from="cmd_vel" to="/unicorn/cmd_vel"/> 
</node>

<!-- source that publishes the joint positions as a sensor_msgs/JointState -->
<param name="use_gui" value="false"/>
<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

<!-- publish all the frames to TF -->
<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
	<param name="publish_frequency" value="50"/>
</node>

<!-- <node name="initialpose_publisher" pkg="unicorn" type="pub_initialpose"/> -->

<!-- Lidar angle limitations (rad) -->
<rosparam param="lower_angle">-1.48</rosparam>
<rosparam param="upper_angle">1.48</rosparam>

<!-- Starts laser filter to enable limitation of laserscan angle -->
<node name="laser_filter" pkg="unicorn" type="laser_scan_filter" output="screen"/>

<!-- Starts interface between automower and unicorn to enable backward driving -->
<node name="am_unicorn_interface" pkg="unicorn" type="am_unicorn_interface" output="screen"/>



</launch>